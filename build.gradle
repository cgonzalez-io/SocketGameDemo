// set as java application
apply plugin: 'application'

//define main class
mainClassName = 'Concentration'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.json', name: 'json', version: '20200518'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.12.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.12.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.16'
}

task runClient(type: JavaExec) {
    group 'gui'
    description 'Displays a GUI for a game of concentration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'Assign32starter.ClientGui'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath

    // Default values for host and port
    def defaultHost = "localhost"
    def defaultPort = 8888

    // Use shorter property names "host" and "port"
    inputs.property("host", project.hasProperty("host") ? project.host : defaultHost)
    inputs.property("port", project.hasProperty("port") ? project.port : defaultPort)

    args inputs.properties["host"] // Pass host argument to main class
    args inputs.properties["port"] // Pass port argument to main class

}

task runServer(type: JavaExec) {
    group 'gui'
    description 'Run the SockServer for the game over a specified port and host'

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'Assign32starter.SockServer'
    standardInput = System.in

    // Default values for port and timeout
    def defaultPort = 8888
    def defaultTimeout = 0

    inputs.property("port", project.hasProperty("port") ? project.port : defaultPort)
    inputs.property("timeout", project.hasProperty("timeout") ? project.timeout : defaultTimeout)

    args inputs.properties["port"] // Pass port argument to main class
    args inputs.properties["timeout"] // Pass timeout argument to main class

}
